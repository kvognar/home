- if consumption.started?
  p.text-center Started #{consumption.start_date.to_date.to_s(:long_ordinal)}
  - if consumption.in_progress?
    p Currently in progress

  - consumption.media_sessions.order(:created_at).each do |session|
    .media-session
      - if session.title.present?
        h4=session.title
      - if session.title.present? || session.text.present? || session.spoiler_text.present?
        h6= session.day.day_of.to_s(:long_ordinal)
      - if session.text.present?
        = markdown(session.text)
      - if session.spoiler_text.present?
        .spoilers.hidden= markdown(session.spoiler_text)
        p.spoiler-warning Spoilers!
  - if consumption.in_progress?
    - if admin?
      = button_to 'Shelve it for now', media_consumption_path(consumption), method: :put, params: { state: 'icebox' }
  - elsif consumption.finished?
    p.text-center Finished #{consumption.finish_date.to_date.to_s(:long_ordinal)}
  - elsif consumption.icebox?
    p.text-center I've put this away for now, but I plan to finish it someday.
    - if admin?
      = button_to 'Continue', media_consumption_path(consumption), method: :put, params: { state: consumption.start_state }
      = button_to 'I give up', media_consumption_path(consumption), method: :put, params: { state: 'abandoned' }
  - elsif consumption.abandoned?
    p.text-center I probably won't come back to this.
    - if admin?
      = button_to 'Hope springs anew', media_consumption_path(consumption), method: :put, params: { state: consumption.start_state }
-  elsif consumption.queued?
  p On deck! I'll start this one soon.
  - if admin?
    = button_to 'Begin', media_consumption_path(consumption), method: :put, params: { state: consumption.start_state }
    = button_to 'Maybe later', media_consumption_path(consumption), method: :put, params: { state: 'someday' }
- else
  p Not Started
  - if admin?
    = button_to 'Begin', media_consumption_path(consumption), method: :put, params: { state: consumption.start_state }
    = button_to 'Queue up', media_consumption_path(consumption), method: :put, params: { state: 'queued' }
